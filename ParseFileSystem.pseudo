Create an index of files and folders on the local machine and the network.

// Define a function to parse the filesystem
function parseFileSystem(rootDirectory):
    // Initialize a database or data structure to store the file information
    database = initializeDatabase()

    // Function to recursively walk through directories
    function walkDirectory(directory):
        // Get all items in the directory
        items = getDirectoryContents(directory)
        
        // Iterate over each item in the directory
        for item in items:
            // Get full path of the item
            fullPath = joinPath(directory, item)
            
            // Check if the item is a file or a directory
            if isFile(fullPath):
                // Get file properties
                fileInfo = {
                    'filepath': fullPath,
                    'filename': getFileName(fullPath),
                    'filetype': getFileExtension(fullPath),
                    'filesize': getFileSize(fullPath),
                    'fileowner': getFileOwner(fullPath),
                    'lastmodified': getLastModified(fullPath),
                    'creationdate': getCreationDate(fullPath),
                    'indexationdate': getCurrentDate()
                }
                // Insert or update file information in the database
                database.upsert(fileInfo)
            elif isDirectory(fullPath):
                // Recursively walk through the subdirectory
                walkDirectory(fullPath)

    // Start walking from the root directory
    walkDirectory(rootDirectory)

    // Return the filled database
    return database

// Define a function to check for changes in the filesystem
function checkForChanges(rootDirectory, previousDatabase):
    // Parse the current filesystem
    currentDatabase = parseFileSystem(rootDirectory)
    
    // Initialize lists to store changes
    addedFiles = []
    modifiedFiles = []
    deletedFiles = []

    // Check for added or modified files
    for file in currentDatabase:
        if not previousDatabase.contains(file['filepath']):
            addedFiles.append(file)
        elif previousDatabase.get(file['filepath'])['lastmodified'] != file['lastmodified']:
            modifiedFiles.append(file)

    // Check for deleted files
    for file in previousDatabase:
        if not currentDatabase.contains(file['filepath']):
            deletedFiles.append(file)

    // Return the lists of changes
    return {
        'added': addedFiles,
        'modified': modifiedFiles,
        'deleted': deletedFiles
    }

// Call the function with the root directory path and previous database
previousDatabase = loadPreviousDatabase("/path/to/previous/database")
changes = checkForChanges("/path/to/root/directory", previousDatabase)

// Save the current database for future comparisons
saveCurrentDatabase(currentDatabase, "/path/to/previous/database")
